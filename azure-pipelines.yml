variables:
  
  - group: captureorder-variables # Variable Group containing  'teamName', 'mongoHost', 'mongoUser' and the secret 'mongoPassword'

  - name: dockerRegistryServiceConnection
    value: 'containerRegistryConnection' # replace with container registry service connection name established during pipeline creation
  
  - name: kubernetesServiceConnection
    value: 'aksworkshop-aksdelete-dev-1558580678713' # replace with Kubernetes cluster service connection established after you create the environment

  - name: tag
    value: '$(Build.BuildId)'
  
  # Kubernetes Namespace
  - name: k8sNamespace
    value: 'dev'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: sabbour.azurecr.io/captureorder # replace with your own repository/image name
        dockerfile: '**/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'manifests'
        targetPath: 'manifests'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: ubuntu-latest
    environment: 'aksworkshop' # name of the environment to target
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: 'myacr-pullsecret'
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              kubernetesServiceConnection: $(kubernetesServiceConnection)

          - task: KubernetesManifest@0
            displayName: Create secret for MongoDB
            inputs:
              action: createSecret
              secretName: mongodb
              secretType: generic
              namespace: $(k8sNamespace)
              secretArguments: --from-literal=mongoHost=$(mongoHost) --from-literal=mongoUser=$(mongoUser) --from-literal=mongoPassword=$(mongoPassword)
              kubernetesServiceConnection: $(kubernetesServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              manifests: manifests/*
              imagePullSecrets: |
                'myacr-pullsecret'
              containers: |
                sabbour.azurecr.io/captureorder:$(tag) # replace with your own repository/imagename
              kubernetesServiceConnection: $(kubernetesServiceConnection)      

          - task: KubernetesManifest@0
            displayName: Patching the deployment environment variables
            inputs:
              action: patch
              resourceToPatch: file
              resourceFiletoPatch: manifests/deployment.yaml
              namespace: $(k8sNamespace)
              patch: '{"spec":{"containers":[{"name":"captureorder","env":[{"name":"teamName","value":"$(teamName)"}}]}]}}'
              kubernetesServiceConnection: $(kubernetesServiceConnection)        